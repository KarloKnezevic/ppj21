/* Generated By:JavaCC: Do not edit this line. Parser.java */
package hr.fer.ppj.labos.ppj21.parse;

import hr.fer.ppj.labos.ppj21.syntaxtree.*;

public class Parser implements MiniJavaConstants {
      
  final public Program program() throws ParseException {
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;
   NodeToken n3;
   Token n4;

   {
   }
    n0 = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n2 = ClassDecl();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    n4 = jj_consume_token(0);
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Program(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   ID n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   Statement n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   {
   }
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    n4 = jj_consume_token(28);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(PUBLIC);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(STATIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(VOID);
                n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(MAIN);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(29);
             n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(STRING);
                  n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(30);
             n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(31);
             n19 = JTBToolkit.makeNodeToken(n20);
    n21 = ID();
    n23 = jj_consume_token(32);
             n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(28);
             n24 = JTBToolkit.makeNodeToken(n25);
    n26 = Statement();
    n28 = jj_consume_token(33);
             n27 = JTBToolkit.makeNodeToken(n28);
    n30 = jj_consume_token(33);
             n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n27,n29);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDecl() throws ParseException {
   NodeToken n0;
   Token n1;
   ID n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ID n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   VarDecl n11;
   NodeListOptional n12 = new NodeListOptional();
   MethodDecl n13;
   NodeToken n14;
   Token n15;

   {
   }
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(EXTENDS);
                     n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ID();
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n9 = jj_consume_token(28);
            n8 = JTBToolkit.makeNodeToken(n9);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n11 = VarDecl();
        n10.addNode(n11);
    }
     n10.nodes.trimToSize();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      n13 = MethodDecl();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    n15 = jj_consume_token(33);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new ClassDecl(n0,n2,n3,n8,n10,n12,n14);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDecl() throws ParseException {
   Type n0;
   ID n1;
   NodeToken n2;
   Token n3;

   {
   }
    n0 = Type();
    n1 = ID();
    n3 = jj_consume_token(34);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new VarDecl(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDecl() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   ID n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   Type n81;
   ID n82;
   VarDecl n8;
   NodeListOptional n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Type n131;
   ID n132;
   VarDecl n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeListOptional n18 = new NodeListOptional();
   VarDecl n19;
   NodeListOptional n20 = new NodeListOptional();
   Statement n21;
   NodeToken n22;
   Token n23;
   Exp n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;

   {
   }
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = ID();
    n5 = jj_consume_token(29);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:
        n9 = new NodeListOptional();
        n7 = new NodeSequence(2);
      n81 = Type();
      n82 = ID();
      //n8 = VarDecl();  //Mastmali!
      n8 = new VarDecl(n81, n82);
        n7.addNode(n8);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
           n10 = new NodeSequence(2);
        n12 = jj_consume_token(35);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
         n131 = Type();
         n132 = ID();
         //n13 = VarDecl();  //Mastmali!
         n13 = new VarDecl(n131, n132);
           n10.addNode(n13);
           n9.addNode(n10);
      }
        n9.nodes.trimToSize();
        n7.addNode(n9);
        n6.addNode(n7);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n15 = jj_consume_token(32);
             n14 = JTBToolkit.makeNodeToken(n15);
    n17 = jj_consume_token(28);
             n16 = JTBToolkit.makeNodeToken(n17);
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      n19 = VarDecl();
        n18.addNode(n19);
    }
     n18.nodes.trimToSize();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case IDENTIFIER:
      case 28:
      case 36:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      n21 = Statement();
        n20.addNode(n21);
    }
     n20.nodes.trimToSize();
    n23 = jj_consume_token(RETURN);
                  n22 = JTBToolkit.makeNodeToken(n23);
    n24 = Exp();
    n26 = jj_consume_token(34);
             n25 = JTBToolkit.makeNodeToken(n26);
    n28 = jj_consume_token(33);
             n27 = JTBToolkit.makeNodeToken(n28);
     {if (true) return new MethodDecl(n0,n2,n3,n4,n6,n14,n16,n18,n20,n22,n24,n25,n27);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   ID n12;

   {
   }
    if (jj_2_2(2)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(INT);
                 n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(30);
               n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(31);
               n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        n9 = jj_consume_token(INT);
                 n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 1);
        break;
      case BOOLEAN:
        n11 = jj_consume_token(BOOLEAN);
                      n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 2);
        break;
      case IDENTIFIER:
        n12 = ID();
        n0 = new NodeChoice(n12, 3);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Statement n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Statement n16;
   NodeToken n17;
   Token n18;
   Statement n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Exp n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   Exp n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   ID n40;
   NodeToken n41;
   Token n42;
   Exp n43;
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   ID n47;
   NodeToken n48;
   Token n49;
   Exp n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   Exp n55;
   NodeToken n56;
   Token n57;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(28);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case IDENTIFIER:
        case 28:
        case 36:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        n5 = Statement();
           n4.addNode(n5);
      }
        n4.nodes.trimToSize();
        n1.addNode(n4);
      n7 = jj_consume_token(33);
               n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
      break;
    case IF:
        n8 = new NodeSequence(7);
      n10 = jj_consume_token(IF);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n12 = jj_consume_token(29);
                n11 = JTBToolkit.makeNodeToken(n12);
        n8.addNode(n11);
      n13 = Exp();
        n8.addNode(n13);
      n15 = jj_consume_token(32);
                n14 = JTBToolkit.makeNodeToken(n15);
        n8.addNode(n14);
      n16 = Statement();
        n8.addNode(n16);
      n18 = jj_consume_token(ELSE);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n8.addNode(n17);
      n19 = Statement();
        n8.addNode(n19);
        n0 = new NodeChoice(n8, 1);
      break;
    case WHILE:
        n20 = new NodeSequence(5);
      n22 = jj_consume_token(WHILE);
                    n21 = JTBToolkit.makeNodeToken(n22);
        n20.addNode(n21);
      n24 = jj_consume_token(29);
                n23 = JTBToolkit.makeNodeToken(n24);
        n20.addNode(n23);
      n25 = Exp();
        n20.addNode(n25);
      n27 = jj_consume_token(32);
                n26 = JTBToolkit.makeNodeToken(n27);
        n20.addNode(n26);
      n28 = Statement();
        n20.addNode(n28);
        n0 = new NodeChoice(n20, 2);
      break;
    case 36:
        n29 = new NodeSequence(5);
      n31 = jj_consume_token(36);
                                 n30 = JTBToolkit.makeNodeToken(n31);
        n29.addNode(n30);
      n33 = jj_consume_token(29);
                n32 = JTBToolkit.makeNodeToken(n33);
        n29.addNode(n32);
      n34 = Exp();
        n29.addNode(n34);
      n36 = jj_consume_token(32);
                n35 = JTBToolkit.makeNodeToken(n36);
        n29.addNode(n35);
      n38 = jj_consume_token(34);
                n37 = JTBToolkit.makeNodeToken(n38);
        n29.addNode(n37);
        n0 = new NodeChoice(n29, 3);
      break;
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_3(2)) {
        n39 = new NodeSequence(5);
        n40 = ID();
        n39.addNode(n40);
        n42 = jj_consume_token(37);
                n41 = JTBToolkit.makeNodeToken(n42);
        n39.addNode(n41);
        n43 = Exp();
        n39.addNode(n43);
        n45 = jj_consume_token(34);
                n44 = JTBToolkit.makeNodeToken(n45);
        n39.addNode(n44);
        n0 = new NodeChoice(n39, 4);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        n46 = new NodeSequence(7);
          n47 = ID();
        n46.addNode(n47);
          n49 = jj_consume_token(30);
                n48 = JTBToolkit.makeNodeToken(n49);
        n46.addNode(n48);
          n50 = Exp();
        n46.addNode(n50);
          n52 = jj_consume_token(31);
                n51 = JTBToolkit.makeNodeToken(n52);
        n46.addNode(n51);
          n54 = jj_consume_token(37);
                n53 = JTBToolkit.makeNodeToken(n54);
        n46.addNode(n53);
          n55 = Exp();
        n46.addNode(n55);
          n57 = jj_consume_token(34);
                n56 = JTBToolkit.makeNodeToken(n57);
        n46.addNode(n56);
        n0 = new NodeChoice(n46, 5);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
   BoolExp n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   BoolExp n5;

   {
   }
    n0 = BoolExp();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(38);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = BoolExp();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Exp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public BoolExp BoolExp() throws ParseException {
   MathExp n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   MathExp n5;

   {
   }
    n0 = MathExp();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(39);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = MathExp();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new BoolExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MathExp MathExp() throws ParseException {
   Term n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Term n8;

   {
   }
    n0 = Term();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
      case 41:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        n5 = jj_consume_token(40);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case 41:
        n7 = jj_consume_token(41);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = Term();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MathExp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
   Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Factor n5;

   {
   }
    n0 = Factor();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(42);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Factor();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Term(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Factor Factor() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   Exp n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ID n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   Atom n22;
   NodeListOptional n23 = new NodeListOptional();
   MethodCall n24;

   {
   }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_12;
      }
      n2 = jj_consume_token(43);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    if (jj_2_4(2)) {
           n4 = new NodeSequence(6);
      n6 = jj_consume_token(NEW);
                    n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
      n8 = jj_consume_token(INT);
                    n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
      n10 = jj_consume_token(30);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n4.addNode(n9);
      n11 = Exp();
           n4.addNode(n11);
      n13 = jj_consume_token(31);
                   n12 = JTBToolkit.makeNodeToken(n13);
           n4.addNode(n12);
           n3 = new NodeChoice(n4, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
           n14 = new NodeSequence(4);
        n16 = jj_consume_token(NEW);
                     n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        n17 = ID();
           n14.addNode(n17);
        n19 = jj_consume_token(29);
                   n18 = JTBToolkit.makeNodeToken(n19);
           n14.addNode(n18);
        n21 = jj_consume_token(32);
                   n20 = JTBToolkit.makeNodeToken(n21);
           n14.addNode(n20);
           n3 = new NodeChoice(n14, 1);
        break;
      case INTEGER_LITERAL:
      case TRUE:
      case THIS:
      case FALSE:
      case IDENTIFIER:
      case 29:
        n22 = Atom();
           n3 = new NodeChoice(n22, 2);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
      case 44:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_13;
      }
      n24 = MethodCall();
        n23.addNode(n24);
    }
     n23.nodes.trimToSize();
     {if (true) return new Factor(n0,n3,n23);}
    throw new Error("Missing return statement in function");
  }

  final public MethodCall MethodCall() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ID n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   Exp n14;
   NodeListOptional n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Exp n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   Exp n25;
   NodeToken n26;
   Token n27;

   {
   }
    if (jj_2_5(2)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(44);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LENGTH);
                    n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        n6 = new NodeSequence(5);
        n8 = jj_consume_token(44);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = ID();
        n6.addNode(n9);
        n11 = jj_consume_token(29);
                n10 = JTBToolkit.makeNodeToken(n11);
        n6.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case NEW:
        case TRUE:
        case THIS:
        case FALSE:
        case IDENTIFIER:
        case 29:
        case 43:
           n15 = new NodeListOptional();
           n13 = new NodeSequence(2);
          n14 = Exp();
           n13.addNode(n14);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 35:
              ;
              break;
            default:
              jj_la1[19] = jj_gen;
              break label_14;
            }
              n16 = new NodeSequence(2);
            n18 = jj_consume_token(35);
                      n17 = JTBToolkit.makeNodeToken(n18);
              n16.addNode(n17);
            n19 = Exp();
              n16.addNode(n19);
              n15.addNode(n16);
          }
           n15.nodes.trimToSize();
           n13.addNode(n15);
           n12.addNode(n13);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        n6.addNode(n12);
        n21 = jj_consume_token(32);
                n20 = JTBToolkit.makeNodeToken(n21);
        n6.addNode(n20);
        n0 = new NodeChoice(n6, 1);
        break;
      case 30:
        n22 = new NodeSequence(3);
        n24 = jj_consume_token(30);
                n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
        n25 = Exp();
        n22.addNode(n25);
        n27 = jj_consume_token(31);
                n26 = JTBToolkit.makeNodeToken(n27);
        n22.addNode(n26);
        n0 = new NodeChoice(n22, 2);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new MethodCall(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Atom Atom() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   ID n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(29);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Exp();
        n1.addNode(n4);
      n6 = jj_consume_token(32);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case IDENTIFIER:
      n7 = ID();
        n0 = new NodeChoice(n7, 1);
      break;
    case INTEGER_LITERAL:
      n9 = jj_consume_token(INTEGER_LITERAL);
                             n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 2);
      break;
    case TRUE:
      n11 = jj_consume_token(TRUE);
                   n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 3);
      break;
    case FALSE:
      n13 = jj_consume_token(FALSE);
                    n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 4);
      break;
    case THIS:
      n15 = jj_consume_token(THIS);
                   n14 = JTBToolkit.makeNodeToken(n15);
        n0 = new NodeChoice(n14, 5);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Atom(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ID ID() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ID(n0);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  public static MiniJavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  public static Token token;
public Token jj_nt;
  private static int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  //private boolean jj_semLA;
  private static int jj_gen;
  final private static int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80000,0x4000000,0xa000400,0x100000,0x0,0xa000400,0x18020200,0xa000400,0x18020200,0x10020200,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x28054900,0x40000000,0x0,0x28054900,0x40000000,0x28054100,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x8,0x0,0x10,0x0,0x10,0x10,0x0,0x40,0x80,0x300,0x300,0x400,0x800,0x0,0x1000,0x8,0x800,0x1000,0x0,};
   }
  final private static JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public static void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public static void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { 
	  static final long serialVersionUID = 0; 
  }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector <int[]>jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[45];
    for (int i = 0; i < 45; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
