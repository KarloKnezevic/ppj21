//
// Generated by JTB 1.2.2
//

package hr.fer.ppj.labos.ppj21.visitor;
import hr.fer.ppj.labos.ppj21.ast.*;

/**
 * All Object visitors must implement this interface.
 */
public interface ObjectVisitor {
   //
   // Object Auto class visitors
   //
   public Object visit(NodeList n, Object argu) throws Exception;
   public Object visit(NodeListOptional n, Object argu) throws Exception;
   public Object visit(NodeOptional n, Object argu) throws Exception;
   public Object visit(NodeSequence n, Object argu) throws Exception;
   public Object visit(NodeToken n, Object argu) throws Exception;

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( ClassDecl() )*
    * f2 -> <EOF>
    */
   public Object visit(Program n, Object argu) throws Exception;

   /**
    * f0 -> <CLASS>
    * f1 -> ID()
    * f2 -> "{"
    * f3 -> <PUBLIC>
    * f4 -> <STATIC>
    * f5 -> <VOID>
    * f6 -> <MAIN>
    * f7 -> "("
    * f8 -> <STRING>
    * f9 -> "["
    * f10 -> "]"
    * f11 -> ID()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> Statement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public Object visit(MainClass n, Object argu) throws Exception;

   /**
    * f0 -> <CLASS>
    * f1 -> ID()
    * f2 -> ( <EXTENDS> ID() )?
    * f3 -> "{"
    * f4 -> ( VarDecl() )*
    * f5 -> ( MethodDecl() )*
    * f6 -> "}"
    */
   public Object visit(ClassDecl n, Object argu) throws Exception;

   /**
    * f0 -> Type()
    * f1 -> ID()
    * f2 -> ";"
    */
   public Object visit(VarDecl n, Object argu) throws Exception;

   /**
    * f0 -> <PUBLIC>
    * f1 -> Type()
    * f2 -> ID()
    * f3 -> "("
    * f4 -> [ VarDecl() ( "," VarDecl() )* ]
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDecl() )*
    * f8 -> ( Statement() )*
    * f9 -> <RETURN>
    * f10 -> Exp()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Object visit(MethodDecl n, Object argu) throws Exception;

   /**
    * f0 -> <INT> "[" "]"
    *       | <INT>
    *       | <BOOLEAN>
    *       | ID()
    */
   public Object visit(Type n, Object argu) throws Exception;

   /**
    * f0 -> "{" ( Statement() )* "}"
    *       | <IF> "(" Exp() ")" Statement() <ELSE> Statement()
    *       | <WHILE> "(" Exp() ")" Statement()
    *       | "System.out.println" "(" Exp() ")" ";"
    *       | ID() "=" Exp() ";"
    *       | ID() "[" Exp() "]" "=" Exp() ";"
    */
   public Object visit(Statement n, Object argu) throws Exception;

   /**
    * f0 -> BoolExp()
    * f1 -> ( "&&" BoolExp() )*
    */
   public Object visit(Exp n, Object argu) throws Exception;

   /**
    * f0 -> MathExp()
    * f1 -> ( "<" MathExp() )*
    */
   public Object visit(BoolExp n, Object argu) throws Exception;

   /**
    * f0 -> Term()
    * f1 -> ( ( "+" | "-" ) Term() )*
    */
   public Object visit(MathExp n, Object argu) throws Exception;

   /**
    * f0 -> Factor()
    * f1 -> ( "*" Factor() )*
    */
   public Object visit(Term n, Object argu) throws Exception;

   /**
    * f0 -> ( "!" )*
    * f1 -> ( <NEW> <INT> "[" Exp() "]" | <NEW> ID() "(" ")" | Atom() )
    * f2 -> ( MethodCall() )*
    */
   public Object visit(Factor n, Object argu) throws Exception;

   /**
    * f0 -> "." <LENGTH>
    *       | "." ID() "(" ( Exp() ( "," Exp() )* )? ")"
    *       | "[" Exp() "]"
    */
   public Object visit(MethodCall n, Object argu) throws Exception;

   /**
    * f0 -> "(" Exp() ")"
    *       | ID()
    *       | <INTEGER_LITERAL>
    *       | <TRUE>
    *       | <FALSE>
    *       | <THIS>
    */
   public Object visit(Atom n, Object argu) throws Exception;

   /**
    * f0 -> <IDENTIFIER>
    */
   public Object visit(ID n, Object argu) throws Exception;

}
