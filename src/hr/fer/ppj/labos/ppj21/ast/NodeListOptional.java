//
// Generated by JTB 1.2.2
//

package hr.fer.ppj.labos.ppj21.ast;

import java.util.*;

import hr.fer.ppj.labos.ppj21.visitor.*;

/**
 * Represents an optional grammar list, e.g. ( A )*
 */
public class NodeListOptional implements NodeListInterface {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public NodeListOptional() {
		nodes = new Vector<Node>();
	}

	public NodeListOptional(Node firstNode) {
		nodes = new Vector<Node>();
		addNode(firstNode);
	}

	public void addNode(Node n) {
		nodes.addElement(n);
	}

	public Enumeration elements() {
		return nodes.elements();
	}

	public Node elementAt(int i) {
		return (Node) nodes.elementAt(i);
	}

	public int size() {
		return nodes.size();
	}

	public boolean present() {
		return nodes.size() != 0;
	}

	public void accept(Visitor v) throws Exception {
		v.visit(this);
	}

	public Object accept(ObjectVisitor v, Object argu) throws Exception {
		return v.visit(this, argu);
	}


	public Vector<Node> nodes;

/*	public ArrayList<Node> toList() {
		ArrayList<Node> result = new ArrayList<Node>();
		if (present())
			for (Node it : nodes)
				result.addAll(it.toList());
		return result;
	}*/
}
